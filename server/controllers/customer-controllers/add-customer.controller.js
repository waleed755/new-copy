import branchModel from '../../models/branch.model.js'
import counterModel from '../../models/counter.model.js'
import customerModel from '../../models/customer.model.js'
import statusModel from '../../models/property-select-models/status.model.js'
import userModel from '../../models/user.model.js'
import auditReport from '../../services/audit-report.service.js'

export const addCustomer = async (req, res) => {
  const { customerData } = req.body
  const ipAddress = req.ipAddress

  if (!req.userId) {
    return res
      .status(401)
      .json({ message: 'Unauthorized: Missing or invalid token' })
  }

  const getNextSequenceValue = async sequenceName => {
    const counter = await counterModel.findOneAndUpdate(
      { name: sequenceName },
      { $inc: { value: 1 } },
      { new: true, upsert: true }
    )
    return counter.value
  }

  try {
    //! finding the login User
    const user = await userModel.findById(req.userId)

    const status = customerData.accountStatusId
      ? await statusModel.findById(customerData.accountStatusId)
      : null

    const accountStatus = status
      ? { id: status._id, value: status.value }
      : null

    // Generate a unique customerRandomId
    const customerRandomId = await getNextSequenceValue('customerId')

    // Generate a unique branchRandomId
    const branchRandomId = await getNextSequenceValue('branchId')

    // Creating a New Customer Data
    customerData.accountCreatedByUserId = user._id
    customerData.accountCreatedByUserName = user.fullName
    customerData.companyId = user.companyId
    customerData.companyName = user.companyName
    customerData.accountStatus = accountStatus
    customerData.customerRandomId = customerRandomId
    customerData.branchRandomId = branchRandomId

    const customer = await customerModel.create(customerData)

    //! adding create-customer in the audit record
    const customerObjectId = customer._id
    const customerStringId = customerObjectId.toString()
    const customerCurrentDate = new Date()
    const customerAuditReport = await auditReport(
      user._id,
      customerCurrentDate,
      'Customer Created',
      `${user.fullName} created a customer-(${customer.accountName})`,
      ipAddress,
      'Customer',
      customerStringId
    )

    console.log('customerAuditReport = ', customerAuditReport)

    // Creating New Branch Data from the Customer
    const branchData = {
      branchCreatedByUserId: user._id,
      branchCreatedByUserName: user.fullName,
      companyId: user.companyId,
      companyName: user.companyName,
      customerId: customer._id,
      customerName: customer.accountName,
      customerRandomId: customer.customerRandomId,
      branchName: customer.accountBranch,
      branchRandomId: customer.branchRandomId,
      branchStatus: accountStatus,
    }

    const branch = await branchModel.create(branchData)

    //! adding create-branch in the audit record
    const branchObjectId = branch._id
    const branchStringId = branchObjectId.toString()
    const branchCurrentDate = new Date()
    const branchAuditReport = await auditReport(
      user._id,
      branchCurrentDate,
      'Branch Created',
      `${user.fullName} created a customer-(${customer.accountName}) & autogenerated a branch-(${branch.branchName})`,
      ipAddress,
      'Branch',
      branchStringId
    )

    console.log('branchAuditReport = ', branchAuditReport)

    res.json({ success: true, message: 'New Customer has been Added!' })
  } catch (error) {
    res.json({ error: true, message: error.message })
  }
}

export default addCustomer
